/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package colloques.ihm;

import colloques.classesMetier.Participant;
import colloques.dao.ParticipantDAO;
import java.awt.GridLayout;
import java.awt.Image;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.text.SimpleDateFormat;
import java.util.GregorianCalendar;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author lukombochristopher
 */
public class ImportParticipants extends javax.swing.JPanel {

    /**
     * Creates new form ImportEvenement
     */
    public ImportParticipants() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        bar = new javax.swing.JProgressBar();
        jPanel3 = new javax.swing.JPanel();
        panneauHaut = new javax.swing.JPanel();
        btnParcourir = new javax.swing.JButton();
        lblNomFile = new javax.swing.JLabel();
        btnInfo = new javax.swing.JButton();
        panneauBas = new javax.swing.JPanel();
        btnImporter = new javax.swing.JButton();

        setBackground(new java.awt.Color(240, 240, 12));
        setLayout(new java.awt.BorderLayout());

        jLabel3.setFont(new java.awt.Font("Arial", 3, 24)); // NOI18N
        jLabel3.setText("Importation des participants");
        jPanel1.add(jLabel3);

        add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel2.add(bar);
        bar.setMaximum(100);
        bar.setMinimum(0);
        bar.setStringPainted(true);

        add(jPanel2, java.awt.BorderLayout.PAGE_END);

        jPanel3.setLayout(new java.awt.BorderLayout());
        GridLayout g = new GridLayout(2,1);
        jPanel3.setLayout(g);

        btnParcourir.setText("Parcourir");
        btnParcourir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnParcourirActionPerformed(evt);
            }
        });
        panneauHaut.add(btnParcourir);

        lblNomFile.setText("Aucun fichier");
        panneauHaut.add(lblNomFile);

        btnInfo.setText("Informations");
        btnInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInfoActionPerformed(evt);
            }
        });
        panneauHaut.add(btnInfo);

        jPanel3.add(panneauHaut, java.awt.BorderLayout.CENTER);

        btnImporter.setText("Importer");
        btnImporter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImporterActionPerformed(evt);
            }
        });
        panneauBas.add(btnImporter);

        jPanel3.add(panneauBas, java.awt.BorderLayout.PAGE_END);

        add(jPanel3, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnParcourirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnParcourirActionPerformed
        try {
            FileReader fr = null;
            BufferedReader br = null;
            String ligne;
            int nbLigne = 0;
            if (jFileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                SwingUtilities.updateComponentTreeUI(jFileChooser);
                file = jFileChooser.getSelectedFile();

                fr = new FileReader(file);
                br = new BufferedReader(fr);
                String colonnes[] = null;

                if (!verifierExtension(file.getName())) { // On vérifie que l'extension est bien valide.
                    JOptionPane.showMessageDialog(jFileChooser, "Sélectionner un fichier CSV valide !", "Message", JOptionPane.ERROR_MESSAGE);
                    fileName = "Aucun fichier";

                } else if (verifierExtension(file.getName())) {
                    colonnes = new String[6];

                    while ((ligne = br.readLine()) != null) {
                        nbLigne++;
                        colonnes = ligne.toString().split(";");
                    }

                    ImportParticipants.total = nbLigne;

                    if (!estValideTableau(colonnes) && colonnes != null) { // On vérifie que le nombre de colonne est bien valide.
                        JOptionPane.showMessageDialog(jFileChooser, "Sélectionner un fichier CSV valide contenant le bon nombre de colonnes!", "Message", JOptionPane.ERROR_MESSAGE);
                        System.err.println(colonnes.length);
                        fileName = "Aucun fichier";
                    } else {
                        fileName = file.getName();
                    }

                }
            } else {
                fileName = "Aucun fichier";

            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        lblNomFile.setText(ImportParticipants.fileName);
    }//GEN-LAST:event_btnParcourirActionPerformed

    private void btnImporterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImporterActionPerformed
        if (file != null) {
            importer(file);
        }
    }//GEN-LAST:event_btnImporterActionPerformed

    private void btnInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInfoActionPerformed
        JOptionPane.showMessageDialog(jFileChooser, "Pensez à remplir le fichier au format suivant : \n nom;prenom;email;organisation;observation;Date Naissance\n ex. : Dupond;Bernard;d.bernard@gmail.com;Facebook;bien;12/11/1950\n");

    }//GEN-LAST:event_btnInfoActionPerformed
    
    /**
     * Méthode permettant de vérifier l'extension du fichier CSV.
     * @param file
     * @return boolean
     */
    public boolean verifierExtension(String file) {
        return file.endsWith(".csv".toLowerCase());
    }
    
    /**
     * Retourne true si le tableau contient bien le bon nombre de colonnes.
     * @param tab
     * @return
     * @throws Exception 
     */
    public boolean estValideTableau(String tab[]) throws Exception {
        return (tab != null && tab.length == 6) ? true : false;
    }

    /**
     * Cette méthode permet d'importer le ou les événements dans la base de
     * données.
     *
     * @param file
     */
    public void importer(File file) {
        FileReader fr2 = null;
        BufferedReader br2 = null;
        String ligne2;
        boolean ok = false;
        try {
            fileName = file.getName();
            System.out.println("Import CSV en cours...");
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

            fr2 = new FileReader(file);
            br2 = new BufferedReader(fr2);

            String nouvelleLigne[] = new String[6];

            while ((ligne2 = br2.readLine()) != null) {

                try {
                    nouvelleLigne = ligne2.split(";");
                    GregorianCalendar dateNaissance = new GregorianCalendar();
                    dateNaissance.setTime(sdf.parse(nouvelleLigne[5].trim().replaceAll("\"", "")));

                    ParticipantDAO pDAO = new ParticipantDAO();

                    if (verifierPresenceEmailParticipant(nouvelleLigne[2].trim().replaceAll("\"", "")) || verifierEmail(nouvelleLigne[2].trim().replaceAll("\"", "")) == false) {                    
                    } else if (pDAO.create(new Participant(nouvelleLigne[0].trim().replaceAll("\"", ""), nouvelleLigne[1].trim().replaceAll("\"", ""), nouvelleLigne[2].trim().replaceAll("\"", ""), nouvelleLigne[3].trim().replaceAll("\"", ""), nouvelleLigne[4].trim().replaceAll("\"", ""), dateNaissance))) {

                        t = new Thread(new Traitement());
                        t.start();
                        ok = true;
                    } else {
                        ok = false;
                        
                        System.err.println("erreur");
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Une erreur est survenu lors de l'importation", "Message", JOptionPane.ERROR_MESSAGE);
                }
            }

            if (ok) {
                JOptionPane.showMessageDialog(this, "Importation effectué avec succès!");
                System.out.println("Importation effectué");
            } else {
                JOptionPane.showMessageDialog(this, "Erreur!");
                System.out.println("Erreur");
                bar.setValue(0);
            }
            if (ImportParticipants.file != null) {
                ImportParticipants.file = null;

            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Une erreur est survenu lors de l'importation", "Message", JOptionPane.ERROR_MESSAGE);
        }

    }

    /**
     * Vérifie la présence de l'adresse Email.
     * @param email
     * @return
     */
    public boolean verifierPresenceEmailParticipant(String email) {
        ParticipantDAO PDAO = new ParticipantDAO();
        boolean present = false;
        for (Participant p : PDAO.getALL()) {
            if (p.getEmail().equals(email)) {
                present = true;
                break;
            }
        }
        return present;
    }

    /**
     * Retourne false si l'adresse email en paramètre n'est pas valide.
     *
     * @param email
     * @return boolean
     */
       public boolean verifierEmail(String email) {
        boolean valide = true;
        String checkmail = "^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@"
		+ "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$";
        Pattern pattern = Pattern.compile(checkmail);
        
         Matcher matcher = pattern.matcher(email);

		
        if (matcher.matches() == false) {
            
            valide = false;
        }
        return valide;
    }

    
    
    class Traitement implements Runnable {

        public void run() {

            for (int val = 0; val <= total; val++) {

                int pourcentage = (int) ((val * 100) / total);

                bar.setValue(pourcentage);
                try {
                    t.sleep(2);

                } catch (InterruptedException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
        }
    }


    private Thread t;
    private static int total;
    private static String fileName = "";
    private static File file = null;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JProgressBar bar;
    private javax.swing.JButton btnImporter;
    private javax.swing.JButton btnInfo;
    private javax.swing.JButton btnParcourir;
    private javax.swing.JFileChooser jFileChooser;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lblNomFile;
    private javax.swing.JPanel panneauBas;
    private javax.swing.JPanel panneauHaut;
    // End of variables declaration//GEN-END:variables
}
